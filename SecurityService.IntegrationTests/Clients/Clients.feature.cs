// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:3.1.0.0
//      SpecFlow Generator Version:3.1.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace SecurityService.IntegrationTests.Clients
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.1.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Xunit.TraitAttribute("Category", "base")]
    [Xunit.TraitAttribute("Category", "clients")]
    public partial class ClientsFeature : Xunit.IClassFixture<ClientsFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = new string[] {
                "base",
                "clients"};
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "Clients.feature"
#line hidden
        
        public ClientsFeature(ClientsFeature.FixtureData fixtureData, InternalSpecFlow.XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Clients", null, ProgrammingLanguage.CSharp, new string[] {
                        "base",
                        "clients"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Create Client")]
        [Xunit.TraitAttribute("FeatureTitle", "Clients")]
        [Xunit.TraitAttribute("Description", "Create Client")]
        public virtual void CreateClient()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create Client", null, ((string[])(null)));
#line 4
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                            "ClientId",
                            "Name",
                            "Description",
                            "Secret",
                            "Scopes",
                            "GrantTypes"});
                table1.AddRow(new string[] {
                            "testclient1",
                            "Test Client",
                            "A test client",
                            "secret1",
                            "Scope1, Scope2",
                            "client_credentials"});
#line 5
 testRunner.Given("I create the following clients", ((string)(null)), table1, "Given ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Get Client")]
        [Xunit.TraitAttribute("FeatureTitle", "Clients")]
        [Xunit.TraitAttribute("Description", "Get Client")]
        public virtual void GetClient()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get Client", null, ((string[])(null)));
#line 9
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                            "ClientId",
                            "Name",
                            "Description",
                            "Secret",
                            "Scopes",
                            "GrantTypes"});
                table2.AddRow(new string[] {
                            "testclient1",
                            "Test Client 1",
                            "A test client 1",
                            "secret1",
                            "Scope1, Scope2",
                            "client_credentials"});
                table2.AddRow(new string[] {
                            "testclient2",
                            "Test Client 2",
                            "A test client 2",
                            "secret2",
                            "Scope1, Scope2",
                            "client_credentials"});
#line 10
 testRunner.Given("I create the following clients", ((string)(null)), table2, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                            "ClientId",
                            "Name",
                            "Description",
                            "Scopes",
                            "GrantTypes"});
                table3.AddRow(new string[] {
                            "testclient1",
                            "Test Client 1",
                            "A test client 1",
                            "Scope1, Scope2",
                            "client_credentials"});
#line 14
 testRunner.When("I get the client with client id \'testclient1\' the client details are returned as " +
                        "follows", ((string)(null)), table3, "When ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Get Clients")]
        [Xunit.TraitAttribute("FeatureTitle", "Clients")]
        [Xunit.TraitAttribute("Description", "Get Clients")]
        [Xunit.TraitAttribute("Category", "PRTest")]
        public virtual void GetClients()
        {
            string[] tagsOfScenario = new string[] {
                    "PRTest"};
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get Clients", null, new string[] {
                        "PRTest"});
#line 19
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                            "ClientId",
                            "Name",
                            "Description",
                            "Secret",
                            "Scopes",
                            "GrantTypes"});
                table4.AddRow(new string[] {
                            "testclient1",
                            "Test Client 1",
                            "A test client 1",
                            "secret1",
                            "Scope1, Scope2",
                            "client_credentials"});
                table4.AddRow(new string[] {
                            "testclient2",
                            "Test Client 2",
                            "A test client 2",
                            "secret2",
                            "Scope1, Scope2",
                            "client_credentials"});
#line 20
 testRunner.Given("I create the following clients", ((string)(null)), table4, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                            "ClientId",
                            "Name",
                            "Description",
                            "Scopes",
                            "GrantTypes"});
                table5.AddRow(new string[] {
                            "testclient1",
                            "Test Client 1",
                            "A test client 1",
                            "Scope1, Scope2",
                            "client_credentials"});
                table5.AddRow(new string[] {
                            "testclient2",
                            "Test Client 2",
                            "A test client 2",
                            "Scope1, Scope2",
                            "client_credentials"});
#line 24
 testRunner.When("I get the clients 2 clients details are returned as follows", ((string)(null)), table5, "When ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.1.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                ClientsFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                ClientsFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
